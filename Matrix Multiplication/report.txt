Given two matrices, both of size n x n, and n is a power of 2:

The brute force algorithm runs through 3 loops of size n, therefore its running time is n*n*n = O(n^3).

This implementation of Strassen's algorithm is not very efficient, involving the creation of a lot of extra arrays.
If we ignore all this object creation and garbage collecting:

Addition and subtraction run through 2 loops of size n/2 = O(n^2).
Parting and combining submatrices run through 2 loops of size n/2 = O(n^2).

8 partitions, 4 combinations, 18 additions/subtractions, and 7 recursive multiplications each of size n/2.

T(n) = 7(T(n/2)) + 8(O(n^2)) + 4(O(n^2)) + 18(O(n^2))
T(n) = 7(T(n/2)) + O(n^2)

f(n) = O(n^2) = O(n^(logb(a-E))) = O(n^(log2(7-E))), for E = 3.
By Case 1 of the Master Theorem, T(n) = O(n^(log2(7))) = about O(n^2.807).

Which in theory is faster than the brute force algorithm, but unfortunately this is not true for my implementation.
A 512 x 512 matrix multiplication is almost instant using multiply(), but takes around 30 seconds using multiplyStrassen().